Modified 20/03/2024, after adjustment to UseEffect and Walls

import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import Papa from 'papaparse';

function SuggestionsPage () {
  const location = useLocation();
  const selectedProperty = location.state ? location.state.selectedProperty : null;
  const selectedDwellingType = useState('');
  const [newEnergyRating, setNewEnergyRating] = useState('');
  const [archetypeData, setArchetypeData] = useState([]);
  const [seaiGrants, setSeaiGrants] = useState([]);
  const [modifiedValues, setModifiedValues] = useState({});
  const [selectedUValues, setSelectedUValues] = useState({});
  const [improvementEstimates, setImprovementEstimates] = useState({});
  const [wallInsulationQuantity, setWallInsulationQuantity] = useState(selectedProperty ? selectedProperty.WallArea : 0);

  const handleValueChange = (field, value) => {
    setModifiedValues(prev => ({ ...prev, [field]: value }));
  };

  const availableRatings = selectedProperty && ['A1', 'A2', 'A3', 'B1', 'B2'].filter(rating => rating !== selectedProperty.EnergyRating && rating < selectedProperty.EnergyRating);

  const [thresholdValues, setThresholdValues] = useState({
    wall: 0, // Default values, will be updated dynamically
    roof: 0,
    floor: 0,
    window: 0,
    door: 0
  });

  const improvementCosts = {
    WallInternalInsulation: 0, // example costs in currency units
    WallExternalInsulation: 0,
    UValueRoof: 0,
    UValueFloor: 0,
    UValueWindow: 0,
    UValueDoor: 0
  };

  const availableGrants = {
    WallInternalGrant: 0, // example grant amounts in currency units
    WallExternalGrant: 0,
    UValueRoof: 0,
    UValueFloor: 0,
    UValueWindow: 0,
    UValueDoor: 0
  };

  const handleUValueChange = (e, field) => {
    setSelectedUValues({ ...selectedUValues, [field]: e.target.checked });
  };

  const submitNewUValues = () => {
    // Logic to calculate predicted results based on new U-values
    console.log('New U-Values submitted:', selectedUValues);
    // You might want to set some results state here based on the new U-values
  };

  const submitNewEnergyRating = () => {
    // Logic to calculate predicted results based on new U-values
    console.log('New U-Values submitted:', selectedUValues);
    // You might want to set some results state here based on the new U-values
  };

  useEffect(() => {
    // Scrolls the window to the top of the new page
    window.scrollTo(0, 0);

    // Set the initial wall insulation quantity based on the selected property
    if (selectedProperty && selectedProperty.WallArea) {
      setWallInsulationQuantity(selectedProperty.WallArea);
    }

    // Define a function to fetch and parse the SEAI grants data
    const fetchSEAIgrants = async () => {
      const response = await fetch('/data/seai_grants.csv');
      const text = await response.text();
      return Papa.parse(text, { header: true, dynamicTyping: true }).data;
    };

    // Define a function to fetch and parse the building archetype data
    const fetchArchetypeData = async () => {
      const response = await fetch('/data/data_building_archetype.csv');
      const text = await response.text();
      return Papa.parse(text, { header: true, dynamicTyping: true }).data;
    };
    // Use Promise.all to fetch both datasets concurrently
    Promise.all([fetchSEAIgrants(), fetchArchetypeData()]).then(([seaiGrantsData, archetypeData]) => {
      setSeaiGrants(seaiGrantsData);
      setArchetypeData(archetypeData);
    });

    // Assuming selectedDwellingType holds type like 'Semi-detached house'
    const dwellingType = selectedProperty ? selectedProperty.DwellingTypeDescr : '';
    const newRating = newEnergyRating;

    // Find matching row for new energy rating and dwelling type from archetype data
    const matchedRow = archetypeData.find(row => row.DwellingType === dwellingType && row.EnergyRating === newRating);

    // If a matching row is found, update the threshold values
    if (matchedRow) {
      setThresholdValues({
        wall: matchedRow.UValueWallMean,
        roof: matchedRow.UValueRoofMean,
        floor: matchedRow.UValueFloorMean,
        window: matchedRow.UValueWindowMean,
        door: matchedRow.UValueDoorMean
      });
    }

    // Update improvement costs and available grants based on SEAI grants data and dwelling type
    const updatedImprovementCosts = { ...improvementCosts }; // Make a copy of current state
    const updatedAvailableGrants = { ...availableGrants }; // Make a copy of current state

    seaiGrantsData.forEach(grant => {
      if (grant.DwellingTypes === dwellingType) {
        switch (grant['Grant name']) {
          case 'Internal Wall Insulation':
            updatedImprovementCosts.WallInternalInsulation = grant.EstimatedImprovementCost;
            updatedAvailableGrants.WallInternalGrant = grant.GrantValue;
            break;
          case 'External Wall Insulation':
            updatedImprovementCosts.WallExternalInsulation = grant.EstimatedImprovementCost;
            updatedAvailableGrants.WallExternalGrant = grant.GrantValue;
            break;
            // Add cases for other types of insulation or improvements
        }
      }
    });

    // Call the data fetching functions
    fetchArchetypeData();
    fetchSEAIgrants();
  }, [selectedProperty, newEnergyRating]); // Ensure useEffect is triggered when these values change

  // Display the selected property and inputs for modifying U-values
  return (
      <div>
        <h1>Selected Property</h1>
        {selectedProperty && (
            <div className="u-values-card">
              <p><strong>Dwelling Type:</strong> {selectedProperty.DwellingTypeDescr}</p>
              <p><strong>Current Energy Rating:</strong> {selectedProperty.EnergyRating}</p>
              <p></p>
              <h2>Select New Energy Rating</h2>
              <p>
                Choosing a new Energy Rating for your home is a proactive step towards enhancing your living
                environment and reducing your energy costs.
              </p>
              <p>
                A higher Energy Rating signifies better thermal efficiency, meaning your home retains heat more
                effectively during winter and stays cooler during summer.
              </p>
              <p>
                This not only improves comfort but also reduces the need for excessive heating or
                cooling, leading to significant savings on energy bills.
              </p>
              <p>
                Additionally, upgrading your home&apos;s energy performance can increase its market
                value and reduce its environmental impact by lowering carbon emissions.
              </p>
              <p>
                Select a new Energy Rating below to see how you can achieve these benefits.
              </p>
              <select value={newEnergyRating} onChange={e => setNewEnergyRating(e.target.value)}>
                <option value="">Select New Energy Rating</option>
                {availableRatings && availableRatings.map(rating => <option key={rating}
                                                                            value={rating}>{rating}</option>)}
              </select>
              <button onClick={submitNewEnergyRating} className="button-blue">Submit</button>
              <h2>Current U-Values</h2>
              <table className="u-values-table">
                <thead>
                <tr>
                  <th>U-Value Types</th>
                  <th>Target U-Values</th>
                  <th>Existing U-Values</th>
                  <th>Description</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                  <th>Walls UValue</th>
                  <td>{thresholdValues.wall}</td>
                  <td className={`value-cell ${selectedProperty.UValueWall - thresholdValues.wall > 0.01 ? 'u-value-high' : selectedProperty.UValueWall - thresholdValues.wall < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueWall}
                  </td>
                  <td className={`${selectedProperty.UValueWall - thresholdValues.wall > 0.01 ? 'u-value-high' : selectedProperty.UValueWall - thresholdValues.wall < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueWall - thresholdValues.wall > 0.01
                      ? 'Your walls are not holding heat well. Consider upgrading insulation.'
                      : selectedProperty.UValueWall - thresholdValues.wall < -0.01
                        ? 'Your walls are well insulated against heat loss.'
                        : 'Your walls meet the minimum standard, but improvements could still be beneficial.'}
                  </td>
                </tr>
                <tr>
                  <th>Roof UValue</th>
                  <td>{thresholdValues.roof}</td>
                  <td className={`value-cell ${selectedProperty.UValueRoof - thresholdValues.roof > 0.01 ? 'u-value-high' : selectedProperty.UValueRoof - thresholdValues.roof < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueRoof}
                  </td>
                  <td className={`${selectedProperty.UValueRoof - thresholdValues.roof > 0.01 ? 'u-value-high' : selectedProperty.UValueRoof - thresholdValues.roof < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueRoof > thresholdValues.roof
                      ? 'Heat is escaping through your roof. Consider upgrading insulation.'
                      : selectedProperty.UValueRoof === thresholdValues.roof
                        ? 'Your roof meets the minimum standard, but improvements could still be beneficial.'
                        : 'Your roof is well insulated against heat loss.'}
                  </td>
                </tr>
                <tr>
                  <th>Floors UValue</th>
                  <td>{thresholdValues.floor}</td>
                  <td className={`value-cell ${selectedProperty.UValueFloor - thresholdValues.floor > 0.01 ? 'u-value-high' : selectedProperty.UValueFloor - thresholdValues.floor < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueFloor}
                  </td>
                  <td className={`${selectedProperty.UValueFloor - thresholdValues.floor > 0.01 ? 'u-value-high' : selectedProperty.UValueFloor - thresholdValues.floor < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueFloor > thresholdValues.floor
                      ? 'Your floors are losing heat, consider improving insulation.'
                      : selectedProperty.UValueFloor === thresholdValues.floor
                        ? 'Your floors meet the standard, but consider enhancements for better warmth.'
                        : 'Your floors are retaining heat efficiently.'}
                  </td>
                </tr>
                <tr>
                  <th>Windows UValue</th>
                  <td>{thresholdValues.window}</td>
                  <td className={`value-cell ${selectedProperty.UValueWindow - thresholdValues.window > 0.01 ? 'u-value-high' : selectedProperty.UValueWindow - thresholdValues.window < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueWindow}
                  </td>
                  <td className={`${selectedProperty.UValueWindow - thresholdValues.window > 0.01 ? 'u-value-high' : selectedProperty.UValueWindow - thresholdValues.window < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueWindow > thresholdValues.window
                      ? 'Your windows are not keeping heat in effectively. Consider updating them.'
                      : selectedProperty.UValueWindow === thresholdValues.window
                        ? 'Your windows are adequate, but newer models could offer more savings.'
                        : 'Your windows are performing well in retaining heat.'}
                  </td>
                </tr>
                <tr>
                  <th>Doors UValue</th>
                  <td>{thresholdValues.door}</td>
                  <td className={`value-cell ${selectedProperty.UvalueDoor - thresholdValues.door > 0.01 ? 'u-value-high' : selectedProperty.UvalueDoor - thresholdValues.door < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UvalueDoor}
                  </td>
                  <td className={`${selectedProperty.UvalueDoor - thresholdValues.door > 0.01 ? 'u-value-high' : selectedProperty.UvalueDoor - thresholdValues.door < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UvalueDoor > thresholdValues.door
                      ? 'Your doors are not insulating well. Consider replacements or sealing gaps.'
                      : selectedProperty.UvalueDoor === thresholdValues.door
                        ? 'Your doors meet the current standard, yet there might be room for improvement.'
                        : 'Your doors are well-sealed and insulated.'}
                  </td>
                </tr>
                </tbody>
              </table>
              <h2>Select U-Values to Modify</h2>
              <div>
                <label>
                  <input type="checkbox" checked={!!selectedUValues.UValueWall}
                         onChange={(e) => handleUValueChange(e, 'UValueWall')}/>
                  Wall
                </label>
              </div>
              <div>
                <label>
                  <input type="checkbox" checked={!!selectedUValues.UValueRoof}
                         onChange={(e) => handleUValueChange(e, 'UValueRoof')}/>
                  Roof
                </label>
              </div>
              <div>
                <label>
                  <input type="checkbox" checked={!!selectedUValues.UValueFloor}
                         onChange={(e) => handleUValueChange(e, 'UValueFloor')}/>
                  Floor
                </label>
              </div>
              <div>
                <label>
                  <input type="checkbox" checked={!!selectedUValues.UValueWindow}
                         onChange={(e) => handleUValueChange(e, 'UValueWindow')}/>
                  Window
                </label>
              </div>
              <div>
                <label>
                  <input type="checkbox" checked={!!selectedUValues.UValueDoor}
                         onChange={(e) => handleUValueChange(e, 'UValueDoor')}/>
                  Door
                </label>
              </div>
              <h2>Select optional items to install</h2>
              <div>
                <label>
                  <input
                      type="checkbox"
                      checked={!!selectedUValues.SolarPanels}
                      onChange={(e) => handleUValueChange(e, 'SolarPanels')}
                  />
                  Solar Panels
                </label>
              </div>
              <div>
                <label>
                  <input
                      type="checkbox"
                      checked={!!selectedUValues.HeatPump}
                      onChange={(e) => handleUValueChange(e, 'HeatPump')}
                  />
                  Heat Pump
                </label>
              </div>

              <div className="u-values-card">
                <h2>Improvement Estimates</h2>
                <table className="u-values-table">
                  <thead>
                  <tr>
                    <th>Improvement</th>
                    <th>Quantity</th>
                    <th>Estimated Works Cost</th>
                    <th>Available SEAI Grant</th>
                    <th>Estimated Cost to Homeowner</th>
                    <th>Apply for Grant</th>
                  </tr>
                  </thead>
                  <tbody>
                  {selectedUValues.UValueWall && (
                      <>
                        <tr>
                          <td>Internal Wall Insulation</td>
                          <td>{wallInsulationQuantity} m²</td>
                          <td>€{improvementCosts.WallInternalInsulation * wallInsulationQuantity}</td>
                          <td>€{availableGrants.WallInternalGrant}</td>
                          <td>€{(improvementCosts.WallInternalInsulation * wallInsulationQuantity) - availableGrants.WallInternalGrant}</td>
                          <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/" target="_blank"
                                 rel="noopener noreferrer" className="button-blue">Apply</a></td>
                        </tr>
                        <tr>
                          <td>External Wall Insulation</td>
                          <td>€16,000</td>
                          <td>€8,000</td>
                          <td>€8,000</td>
                          <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                                 target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                        </tr>
                        <tr>
                          <td>Cavity Wall Insulation</td>
                          <td>€2,200</td>
                          <td>€1,700</td>
                          <td>€500</td>
                          <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                                 target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                        </tr>
                      </>
                  )}
                  {selectedUValues.UValueRoof && (
                      <tr>
                        <td>Roof/Attic Insulation</td>
                        <td>€2,000</td>
                        <td>€1,500</td>
                        <td>€500</td>
                        <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                               target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                      </tr>
                  )}
                  {/* Repeat similar structures for UValueFloor, UValueWindow, UValueDoor if necessary */}
                  </tbody>
                </table>
                {/* You can add additional instructions or information below the table */}
              </div>

            </div>
        )}
      </div>
  );
}
export default SuggestionsPage;


Modified 20/03/2024, before adjustment to UseEffect

import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import Papa from 'papaparse';

function SuggestionsPage () {
  const location = useLocation();
  const selectedProperty = location.state ? location.state.selectedProperty : null;
  const selectedDwellingType = useState('');
  const [newEnergyRating, setNewEnergyRating] = useState('');
  const [archetypeData, setArchetypeData] = useState([]);
  const [modifiedValues, setModifiedValues] = useState({});
  const [selectedUValues, setSelectedUValues] = useState({});

  const handleValueChange = (field, value) => {
    setModifiedValues(prev => ({ ...prev, [field]: value }));
  };

  const availableRatings = selectedProperty && ['A1', 'A2', 'A3', 'B1', 'B2'].filter(rating => rating !== selectedProperty.EnergyRating && rating < selectedProperty.EnergyRating);

  const [thresholdValues, setThresholdValues] = useState({
    wall: 0, // Default values, will be updated dynamically
    roof: 0,
    floor: 0,
    window: 0,
    door: 0
  });

  const improvementCosts = {
    UValueWall: 5000, // example costs in currency units
    UValueRoof: 4000,
    UValueFloor: 3000,
    UValueWindow: 2000,
    UValueDoor: 1000
  };

  const availableGrants = {
    UValueWall: 2000, // example grant amounts in currency units
    UValueRoof: 1500,
    UValueFloor: 1000,
    UValueWindow: 500,
    UValueDoor: 250
  };

  const handleUValueChange = (e, field) => {
    setSelectedUValues({ ...selectedUValues, [field]: e.target.checked });
  };

  const submitNewUValues = () => {
    // Logic to calculate predicted results based on new U-values
    console.log('New U-Values submitted:', selectedUValues);
    // You might want to set some results state here based on the new U-values
  };

  const submitNewEnergyRating = () => {
    // Logic to calculate predicted results based on new U-values
    console.log('New U-Values submitted:', selectedUValues);
    // You might want to set some results state here based on the new U-values
  };

  useEffect(() => {
    // Scrolls the window to the top of the new page
    window.scrollTo(0, 0);

    // Fetch archetype data once at the start or when the selected property changes
    fetch('/data/data_building_archetype.csv')
      .then(response => response.text())
      .then(text => {
        Papa.parse(text, {
          header: true,
          complete: result => {
            // Set the full dataset (if you need to use it elsewhere)
            setArchetypeData(result.data);

            // Assuming selectedDwellingType holds type like 'Semi-detached house'
            const dwellingType = selectedProperty ? selectedProperty.DwellingTypeDescr : '';
            const newRating = newEnergyRating;

            // Find matching row for new energy rating and dwelling type
            const matchedRow = result.data.find(row =>
              row.DwellingType === dwellingType && row.EnergyRating === newRating);

            // If a matching row is found, update the threshold values
            if (matchedRow) {
              setThresholdValues({
                wall: parseFloat(matchedRow.UValueWallMean),
                roof: parseFloat(matchedRow.UValueRoofMean),
                floor: parseFloat(matchedRow.UValueFloorMean),
                window: parseFloat(matchedRow.UValueWindowMean),
                door: parseFloat(matchedRow.UValueDoorMean)
              });
            }
          }
        });
      });
  }, [selectedProperty, newEnergyRating]); // Ensure useEffect is triggered when these values change

  // Display the selected property and inputs for modifying U-values
  return (
      <div>
        <h1>Selected Property</h1>
        {selectedProperty && (
            <div className="u-values-card">
              <p><strong>Dwelling Type:</strong> {selectedProperty.DwellingTypeDescr}</p>
              <p><strong>Current Energy Rating:</strong> {selectedProperty.EnergyRating}</p>
              <p></p>
              <h2>Select New Energy Rating</h2>
              <p>
                Choosing a new Energy Rating for your home is a proactive step towards enhancing your living
                environment and reducing your energy costs.
              </p>
              <p>
                A higher Energy Rating signifies better thermal efficiency, meaning your home retains heat more
                effectively during winter and stays cooler during summer.
              </p>
              <p>
                This not only improves comfort but also reduces the need for excessive heating or
                cooling, leading to significant savings on energy bills.
              </p>
              <p>
                Additionally, upgrading your home&apos;s energy performance can increase its market
                value and reduce its environmental impact by lowering carbon emissions.
              </p>
              <p>
                Select a new Energy Rating below to see how you can achieve these benefits.
              </p>
              <select value={newEnergyRating} onChange={e => setNewEnergyRating(e.target.value)}>
                <option value="">Select New Energy Rating</option>
                {availableRatings && availableRatings.map(rating => <option key={rating}
                                                                            value={rating}>{rating}</option>)}
              </select>
              <button onClick={submitNewEnergyRating} className="button-blue">Submit</button>
              <h2>Current U-Values</h2>
              <table className="u-values-table">
                <thead>
                <tr>
                  <th>U-Value Types</th>
                  <th>Target U-Values</th>
                  <th>Existing U-Values</th>
                  <th>Description</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                  <th>Walls UValue</th>
                  <td>{thresholdValues.wall}</td>
                  <td className={`value-cell ${selectedProperty.UValueWall - thresholdValues.wall > 0.01 ? 'u-value-high' : selectedProperty.UValueWall - thresholdValues.wall < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueWall}
                  </td>
                  <td className={`${selectedProperty.UValueWall - thresholdValues.wall > 0.01 ? 'u-value-high' : selectedProperty.UValueWall - thresholdValues.wall < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueWall - thresholdValues.wall > 0.01
                      ? 'Your walls are not holding heat well. Consider upgrading insulation.'
                      : selectedProperty.UValueWall - thresholdValues.wall < -0.01
                        ? 'Your walls are well insulated against heat loss.'
                        : 'Your walls meet the minimum standard, but improvements could still be beneficial.'}
                  </td>
                </tr>
                <tr>
                  <th>Roof UValue</th>
                  <td>{thresholdValues.roof}</td>
                  <td className={`value-cell ${selectedProperty.UValueRoof - thresholdValues.roof > 0.01 ? 'u-value-high' : selectedProperty.UValueRoof - thresholdValues.roof < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueRoof}
                  </td>
                  <td className={`${selectedProperty.UValueRoof - thresholdValues.roof > 0.01 ? 'u-value-high' : selectedProperty.UValueRoof - thresholdValues.roof < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueRoof > thresholdValues.roof
                      ? 'Heat is escaping through your roof. Consider upgrading insulation.'
                      : selectedProperty.UValueRoof === thresholdValues.roof
                        ? 'Your roof meets the minimum standard, but improvements could still be beneficial.'
                        : 'Your roof is well insulated against heat loss.'}
                  </td>
                </tr>
                <tr>
                  <th>Floors UValue</th>
                  <td>{thresholdValues.floor}</td>
                  <td className={`value-cell ${selectedProperty.UValueFloor - thresholdValues.floor > 0.01 ? 'u-value-high' : selectedProperty.UValueFloor - thresholdValues.floor < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueFloor}
                  </td>
                  <td className={`${selectedProperty.UValueFloor - thresholdValues.floor > 0.01 ? 'u-value-high' : selectedProperty.UValueFloor - thresholdValues.floor < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueFloor > thresholdValues.floor
                      ? 'Your floors are losing heat, consider improving insulation.'
                      : selectedProperty.UValueFloor === thresholdValues.floor
                        ? 'Your floors meet the standard, but consider enhancements for better warmth.'
                        : 'Your floors are retaining heat efficiently.'}
                  </td>
                </tr>
                <tr>
                  <th>Windows UValue</th>
                  <td>{thresholdValues.window}</td>
                  <td className={`value-cell ${selectedProperty.UValueWindow - thresholdValues.window > 0.01 ? 'u-value-high' : selectedProperty.UValueWindow - thresholdValues.window < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueWindow}
                  </td>
                  <td className={`${selectedProperty.UValueWindow - thresholdValues.window > 0.01 ? 'u-value-high' : selectedProperty.UValueWindow - thresholdValues.window < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UValueWindow > thresholdValues.window
                      ? 'Your windows are not keeping heat in effectively. Consider updating them.'
                      : selectedProperty.UValueWindow === thresholdValues.window
                        ? 'Your windows are adequate, but newer models could offer more savings.'
                        : 'Your windows are performing well in retaining heat.'}
                  </td>
                </tr>
                <tr>
                  <th>Doors UValue</th>
                  <td>{thresholdValues.door}</td>
                  <td className={`value-cell ${selectedProperty.UvalueDoor - thresholdValues.door > 0.01 ? 'u-value-high' : selectedProperty.UvalueDoor - thresholdValues.door < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UvalueDoor}
                  </td>
                  <td className={`${selectedProperty.UvalueDoor - thresholdValues.door > 0.01 ? 'u-value-high' : selectedProperty.UvalueDoor - thresholdValues.door < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                    {selectedProperty.UvalueDoor > thresholdValues.door
                      ? 'Your doors are not insulating well. Consider replacements or sealing gaps.'
                      : selectedProperty.UvalueDoor === thresholdValues.door
                        ? 'Your doors meet the current standard, yet there might be room for improvement.'
                        : 'Your doors are well-sealed and insulated.'}
                  </td>
                </tr>
                </tbody>
              </table>
              <h2>Select U-Values to Modify</h2>
              <div>
                <label>
                  <input type="checkbox" checked={!!selectedUValues.UValueWall}
                         onChange={(e) => handleUValueChange(e, 'UValueWall')}/>
                  Wall
                </label>
              </div>
              <div>
                <label>
                  <input type="checkbox" checked={!!selectedUValues.UValueRoof}
                         onChange={(e) => handleUValueChange(e, 'UValueRoof')}/>
                  Roof
                </label>
              </div>
              <div>
                <label>
                  <input type="checkbox" checked={!!selectedUValues.UValueFloor}
                         onChange={(e) => handleUValueChange(e, 'UValueFloor')}/>
                  Floor
                </label>
              </div>
              <div>
                <label>
                  <input type="checkbox" checked={!!selectedUValues.UValueWindow}
                         onChange={(e) => handleUValueChange(e, 'UValueWindow')}/>
                  Window
                </label>
              </div>
              <div>
                <label>
                  <input type="checkbox" checked={!!selectedUValues.UValueDoor}
                         onChange={(e) => handleUValueChange(e, 'UValueDoor')}/>
                  Door
                </label>
              </div>
              <h2>Select optional items to install</h2>
              <div>
                <label>
                  <input
                      type="checkbox"
                      checked={!!selectedUValues.SolarPanels}
                      onChange={(e) => handleUValueChange(e, 'SolarPanels')}
                  />
                  Solar Panels
                </label>
              </div>
              <div>
                <label>
                  <input
                      type="checkbox"
                      checked={!!selectedUValues.HeatPump}
                      onChange={(e) => handleUValueChange(e, 'HeatPump')}
                  />
                  Heat Pump
                </label>
              </div>

              <div className="u-values-card">
                <h2>Improvement Estimates</h2>
                <table className="u-values-table">
                  <thead>
                  <tr>
                    <th>Improvement</th>
                    <th>Estimated Works Cost</th>
                    <th>Available SEAI Grant</th>
                    <th>Estimated Cost to Homeowner</th>
                    <th>Apply for Grant</th>
                  </tr>
                  </thead>
                  <tbody>
                  {selectedUValues.UValueWall && (
                      <>
                        <tr>
                          <td>Internal Wall Insulation</td>
                          <td>€9,000</td>
                          <td>€4,500</td>
                          <td>€4,500</td>
                          <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                                 target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                        </tr>
                        <tr>
                          <td>External Wall Insulation</td>
                          <td>€16,000</td>
                          <td>€8,000</td>
                          <td>€8,000</td>
                          <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                                 target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                        </tr>
                        <tr>
                          <td>Cavity Wall Insulation</td>
                          <td>€2,200</td>
                          <td>€1,700</td>
                          <td>€500</td>
                          <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                                 target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                        </tr>
                      </>
                  )}
                  {selectedUValues.UValueRoof && (
                      <tr>
                        <td>Roof/Attic Insulation</td>
                        <td>€2,000</td>
                        <td>€1,500</td>
                        <td>€500</td>
                        <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                               target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                      </tr>
                  )}
                  {/* Repeat similar structures for UValueFloor, UValueWindow, UValueDoor if necessary */}
                  </tbody>
                </table>
                {/* You can add additional instructions or information below the table */}
              </div>

            </div>
        )}
      </div>
  );
}

export default SuggestionsPage;


Modified 19/03/2024, but with an infinite loop for seai_grants

import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import Papa from 'papaparse';

function SuggestionsPage () {
  const location = useLocation();
  const selectedProperty = location.state ? location.state.selectedProperty : null;
  const selectedDwellingType = useState('');
  const [newEnergyRating, setNewEnergyRating] = useState('');
  const [archetypeData, setArchetypeData] = useState([]);
  const [modifiedValues, setModifiedValues] = useState({});
  const [selectedUValues, setSelectedUValues] = useState({});

  const handleValueChange = (field, value) => {
    setModifiedValues(prev => ({ ...prev, [field]: value }));
  };

  const availableRatings = selectedProperty && ['A1', 'A2', 'A3', 'B1', 'B2'].filter(rating => rating !== selectedProperty.EnergyRating && rating < selectedProperty.EnergyRating);

  const [thresholdValues, setThresholdValues] = useState({
    wall: 0, // Default values, will be updated dynamically
    roof: 0,
    floor: 0,
    window: 0,
    door: 0
  });

  const [improvementEstimates, setImprovementEstimates] = useState({});

  const [seaiGrants, setSeaiGrants] = useState([]);

  const handleUValueChange = (e, field) => {
    setSelectedUValues({ ...selectedUValues, [field]: e.target.checked });
  };

  const submitNewUValues = () => {
    // Logic to calculate predicted results based on new U-values
    console.log('New U-Values submitted:', selectedUValues);
    // You might want to set some results state here based on the new U-values
  };

  const submitNewEnergyRating = () => {
    // Logic to calculate predicted results based on new U-values
    console.log('New U-Values submitted:', selectedUValues);
    // You might want to set some results state here based on the new U-values
  };

  useEffect(() => {
    // Scrolls the window to the top of the new page
    window.scrollTo(0, 0);

    // Fetch SEAI grants data
    fetch('/data/seai_grants.csv')
      .then(response => response.text())
      .then(text => {
        Papa.parse(text, {
          header: true,
          complete: (result) => {
            setSeaiGrants(result.data);
          }
        });
      });

    // Fetch archetype data once at the start or when the selected property changes
    fetch('/data/data_building_archetype.csv')
      .then(response => response.text())
      .then(text => {
        Papa.parse(text, {
          header: true,
          complete: result => {
            // Set the full dataset (if you need to use it elsewhere)
            setArchetypeData(result.data);

            // Assuming selectedDwellingType holds type like 'Semi-detached house'
            const dwellingType = selectedProperty ? selectedProperty.DwellingTypeDescr : '';
            const newRating = newEnergyRating;
            const areaMappings = {
              UValueWall: selectedProperty ? selectedProperty.WallArea : 0,
              UValueRoof: selectedProperty ? selectedProperty.RoofArea : 0,
              UValueFloor: selectedProperty ? selectedProperty.FloorArea : 0,
              UValueWindow: selectedProperty ? selectedProperty.WindowArea : 0,
              UValueDoor: selectedProperty ? selectedProperty.DoorArea : 0
            };

            // Find matching row for new energy rating and dwelling type
            const matchedRow = result.data.find(row =>
              row.DwellingType === dwellingType && row.EnergyRating === newRating);

            // If a matching row is found, update the threshold values
            if (matchedRow) {
              setThresholdValues({
                wall: parseFloat(matchedRow.UValueWallMean),
                roof: parseFloat(matchedRow.UValueRoofMean),
                floor: parseFloat(matchedRow.UValueFloorMean),
                window: parseFloat(matchedRow.UValueWindowMean),
                door: parseFloat(matchedRow.UValueDoorMean)
              });
            }

            // Calculate the grants and costs based on the selected property
            const newEstimates = {};
            seaiGrants.forEach(grant => {
              if (grant.DwellingTypes === dwellingType) {
                Object.keys(areaMappings).forEach(key => {
                  // Map grant name to the UValue keys, adjust if necessary
                  const grantKey = grant.GrantName.replace(/\s+/g, '') + 'Insulation';
                  if (grantKey === key) {
                    newEstimates[key] = {
                      grantValue: parseFloat(grant.GrantValue),
                      estimatedImprovementCost: parseFloat(grant.EstimatedImprovementCost) * areaMappings[key]
                      // Calculate other fields as needed
                    };
                  }
                });
              }
            });
            setImprovementEstimates(newEstimates);
          }
        });
      });
  }, [selectedProperty, newEnergyRating, seaiGrants]); // Ensure useEffect is triggered when these values change

  // Display the selected property and inputs for modifying U-values
  return (
        <div>
            <h1>Selected Property</h1>
            {selectedProperty && (
                <div className="u-values-card">
                  <p><strong>Dwelling Type:</strong> {selectedProperty.DwellingTypeDescr}</p>
                  <p><strong>Current Energy Rating:</strong> {selectedProperty.EnergyRating}</p>
                  <p></p>
                  <h2>Select New Energy Rating</h2>
                  <p>
                    Choosing a new Energy Rating for your home is a proactive step towards enhancing your living
                    environment and reducing your energy costs.
                  </p>
                  <p>
                    A higher Energy Rating signifies better thermal efficiency, meaning your home retains heat more
                    effectively during winter and stays cooler during summer.
                  </p>
                  <p>
                    This not only improves comfort but also reduces the need for excessive heating or
                    cooling, leading to significant savings on energy bills.
                  </p>
                  <p>
                    Additionally, upgrading your home&apos;s energy performance can increase its market
                    value and reduce its environmental impact by lowering carbon emissions.
                  </p>
                  <p>
                    Select a new Energy Rating below to see how you can achieve these benefits.
                  </p>
                  <select value={newEnergyRating} onChange={e => setNewEnergyRating(e.target.value)}>
                    <option value="">Select New Energy Rating</option>
                    {availableRatings && availableRatings.map(rating => <option key={rating}
                                                                                value={rating}>{rating}</option>)}
                  </select>
                  <button onClick={submitNewEnergyRating} className="button-blue">Submit</button>
                  <h2>Current U-Values</h2>
                  <table className="u-values-table">
                    <thead>
                    <tr>
                      <th>U-Value Types</th>
                      <th>Target U-Values</th>
                      <th>Existing U-Values</th>
                      <th>Description</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                      <th>Walls UValue</th>
                      <td>{thresholdValues.wall}</td>
                      <td className={`value-cell ${selectedProperty.UValueWall - thresholdValues.wall > 0.01 ? 'u-value-high' : selectedProperty.UValueWall - thresholdValues.wall < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueWall}
                      </td>
                      <td className={`${selectedProperty.UValueWall - thresholdValues.wall > 0.01 ? 'u-value-high' : selectedProperty.UValueWall - thresholdValues.wall < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueWall - thresholdValues.wall > 0.01
                          ? 'Your walls are not holding heat well. Consider upgrading insulation.'
                          : selectedProperty.UValueWall - thresholdValues.wall < -0.01
                            ? 'Your walls are well insulated against heat loss.'
                            : 'Your walls meet the minimum standard, but improvements could still be beneficial.'}
                      </td>
                    </tr>
                    <tr>
                      <th>Roof UValue</th>
                      <td>{thresholdValues.roof}</td>
                      <td className={`value-cell ${selectedProperty.UValueRoof - thresholdValues.roof > 0.01 ? 'u-value-high' : selectedProperty.UValueRoof - thresholdValues.roof < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueRoof}
                      </td>
                      <td className={`${selectedProperty.UValueRoof - thresholdValues.roof > 0.01 ? 'u-value-high' : selectedProperty.UValueRoof - thresholdValues.roof < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueRoof > thresholdValues.roof
                          ? 'Heat is escaping through your roof. Consider upgrading insulation.'
                          : selectedProperty.UValueRoof === thresholdValues.roof
                            ? 'Your roof meets the minimum standard, but improvements could still be beneficial.'
                            : 'Your roof is well insulated against heat loss.'}
                      </td>
                    </tr>
                    <tr>
                      <th>Floors UValue</th>
                      <td>{thresholdValues.floor}</td>
                      <td className={`value-cell ${selectedProperty.UValueFloor - thresholdValues.floor > 0.01 ? 'u-value-high' : selectedProperty.UValueFloor - thresholdValues.floor < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueFloor}
                      </td>
                      <td className={`${selectedProperty.UValueFloor - thresholdValues.floor > 0.01 ? 'u-value-high' : selectedProperty.UValueFloor - thresholdValues.floor < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueFloor > thresholdValues.floor
                          ? 'Your floors are losing heat, consider improving insulation.'
                          : selectedProperty.UValueFloor === thresholdValues.floor
                            ? 'Your floors meet the standard, but consider enhancements for better warmth.'
                            : 'Your floors are retaining heat efficiently.'}
                      </td>
                    </tr>
                    <tr>
                      <th>Windows UValue</th>
                      <td>{thresholdValues.window}</td>
                      <td className={`value-cell ${selectedProperty.UValueWindow - thresholdValues.window > 0.01 ? 'u-value-high' : selectedProperty.UValueWindow - thresholdValues.window < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueWindow}
                      </td>
                      <td className={`${selectedProperty.UValueWindow - thresholdValues.window > 0.01 ? 'u-value-high' : selectedProperty.UValueWindow - thresholdValues.window < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueWindow > thresholdValues.window
                          ? 'Your windows are not keeping heat in effectively. Consider updating them.'
                          : selectedProperty.UValueWindow === thresholdValues.window
                            ? 'Your windows are adequate, but newer models could offer more savings.'
                            : 'Your windows are performing well in retaining heat.'}
                      </td>
                    </tr>
                    <tr>
                      <th>Doors UValue</th>
                      <td>{thresholdValues.door}</td>
                      <td className={`value-cell ${selectedProperty.UvalueDoor - thresholdValues.door > 0.01 ? 'u-value-high' : selectedProperty.UvalueDoor - thresholdValues.door < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UvalueDoor}
                      </td>
                      <td className={`${selectedProperty.UvalueDoor - thresholdValues.door > 0.01 ? 'u-value-high' : selectedProperty.UvalueDoor - thresholdValues.door < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UvalueDoor > thresholdValues.door
                          ? 'Your doors are not insulating well. Consider replacements or sealing gaps.'
                          : selectedProperty.UvalueDoor === thresholdValues.door
                            ? 'Your doors meet the current standard, yet there might be room for improvement.'
                            : 'Your doors are well-sealed and insulated.'}
                      </td>
                    </tr>
                    </tbody>
                  </table>
                  <h2>Select U-Values to Modify</h2>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueWall}
                             onChange={(e) => handleUValueChange(e, 'UValueWall')}/>
                      Wall
                    </label>
                  </div>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueRoof}
                             onChange={(e) => handleUValueChange(e, 'UValueRoof')}/>
                      Roof
                    </label>
                  </div>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueFloor}
                             onChange={(e) => handleUValueChange(e, 'UValueFloor')}/>
                      Floor
                    </label>
                  </div>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueWindow}
                             onChange={(e) => handleUValueChange(e, 'UValueWindow')}/>
                      Window
                    </label>
                  </div>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueDoor}
                             onChange={(e) => handleUValueChange(e, 'UValueDoor')}/>
                      Door
                    </label>
                  </div>

                  <div className="u-values-card">
                    <h2>Improvement Estimates</h2>
                    <table className="u-values-table">
                      <thead>
                      <tr>
                        <th>Improvement</th>
                        <th>Quantity</th>
                        <th>Estimated Works Cost</th>
                        <th>Available SEAI Grant</th>
                        <th>Estimated Cost to Homeowner</th>
                        <th>Apply for Grant</th>
                      </tr>
                      </thead>
                      <tbody>
                      {/* Wall improvements */}
                      {selectedUValues.UValueWall && Object.entries(improvementEstimates).filter(([key]) => key.includes('Wall')).map(([key, values]) => (
                          <tr key={key}>
                            <td>{key}</td>
                            <td>€{values.estimatedImprovementCost}</td>
                            <td>€{values.grantValue}</td>
                            <td>€{values.estimatedImprovementCost - values.grantValue}</td>
                            <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                                   target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                          </tr>
                      ))}

                      {/* Roof improvements */}
                      {selectedUValues.UValueRoof && Object.entries(improvementEstimates).filter(([key]) => key.includes('Roof') || key.includes('Attic')).map(([key, values]) => (
                          <tr key={key}>
                            <td>{key}</td>
                            <td>€{values.estimatedImprovementCost}</td>
                            <td>€{values.grantValue}</td>
                            <td>€{values.estimatedImprovementCost - values.grantValue}</td>
                            <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                                   target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                          </tr>
                      ))}

                      {/* Floor improvements */}
                      {selectedUValues.UValueFloor && Object.entries(improvementEstimates).filter(([key]) => key.includes('Floor')).map(([key, values]) => (
                          <tr key={key}>
                            <td>{key}</td>
                            <td>€{values.estimatedImprovementCost}</td>
                            <td>€{values.grantValue}</td>
                            <td>€{values.estimatedImprovementCost - values.grantValue}</td>
                            <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                                   target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                          </tr>
                      ))}

                      {/* Windows improvements - User input for number of windows required */}
                      {selectedUValues.UValueWindow && (
                          <tr>
                            <td>Windows Replacement</td>
                            {/* Assuming you have a state to hold the number of windows the user wants to replace */}
                            <td>€{improvementEstimates.Windows ? improvementEstimates.Windows.estimatedImprovementCost * numberOfWindows : 'N/A'}</td>
                            <td>€{improvementEstimates.Windows ? improvementEstimates.Windows.grantValue * numberOfWindows : 'N/A'}</td>
                            <td>€{improvementEstimates.Windows ? (improvementEstimates.Windows.estimatedImprovementCost - improvementEstimates.Windows.grantValue) * numberOfWindows : 'N/A'}</td>
                            <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                                   target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                          </tr>
                      )}

                      {/* Door improvements */}
                      {selectedUValues.UValueDoor && Object.entries(improvementEstimates).filter(([key]) => key.includes('Door')).map(([key, values]) => (
                          <tr key={key}>
                            <td>{key}</td>
                            <td>€{values.estimatedImprovementCost}</td>
                            <td>€{values.grantValue}</td>
                            <td>€{values.estimatedImprovementCost - values.grantValue}</td>
                            <td><a href="https://www.seai.ie/grants
            <td><a href=" https:// www.seai.ie/grants/home-energy-grants/insulation-grants/"
                                   target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                          </tr>
                      ))}
                      </tbody>
                    </table>
                    {/* You can add additional instructions or information below the table */}
                  </div>

                </div>
            )}
        </div>
  );
}

export default SuggestionsPage;


Modified 18/03/2024

import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import Papa from 'papaparse';

function SuggestionsPage () {
  const location = useLocation();
  const selectedProperty = location.state ? location.state.selectedProperty : null;
  const selectedDwellingType = useState('');
  const [newEnergyRating, setNewEnergyRating] = useState('');
  const [archetypeData, setArchetypeData] = useState([]);
  const [modifiedValues, setModifiedValues] = useState({});
  const [selectedUValues, setSelectedUValues] = useState({});

  const handleValueChange = (field, value) => {
    setModifiedValues(prev => ({ ...prev, [field]: value }));
  };

  const availableRatings = selectedProperty && ['A1', 'A2', 'A3', 'B1', 'B2'].filter(rating => rating !== selectedProperty.EnergyRating && rating < selectedProperty.EnergyRating);

  const [thresholdValues, setThresholdValues] = useState({
    wall: 0, // Default values, will be updated dynamically
    roof: 0,
    floor: 0,
    window: 0,
    door: 0
  });

  const improvementCosts = {
    UValueWall: 5000, // example costs in currency units
    UValueRoof: 4000,
    UValueFloor: 3000,
    UValueWindow: 2000,
    UValueDoor: 1000
  };

  const availableGrants = {
    UValueWall: 2000, // example grant amounts in currency units
    UValueRoof: 1500,
    UValueFloor: 1000,
    UValueWindow: 500,
    UValueDoor: 250
  };

  const handleUValueChange = (e, field) => {
    setSelectedUValues({ ...selectedUValues, [field]: e.target.checked });
  };

  const submitNewUValues = () => {
    // Logic to calculate predicted results based on new U-values
    console.log('New U-Values submitted:', selectedUValues);
    // You might want to set some results state here based on the new U-values
  };

  const submitNewEnergyRating = () => {
    // Logic to calculate predicted results based on new U-values
    console.log('New U-Values submitted:', selectedUValues);
    // You might want to set some results state here based on the new U-values
  };

  useEffect(() => {
    // Scrolls the window to the top of the new page
    window.scrollTo(0, 0);

    // Fetch archetype data once at the start or when the selected property changes
    fetch('/data/data_building_archetype.csv')
      .then(response => response.text())
      .then(text => {
        Papa.parse(text, {
          header: true,
          complete: result => {
            // Set the full dataset (if you need to use it elsewhere)
            setArchetypeData(result.data);

            // Assuming selectedDwellingType holds type like 'Semi-detached house'
            const dwellingType = selectedProperty ? selectedProperty.DwellingTypeDescr : '';
            const newRating = newEnergyRating;

            // Find matching row for new energy rating and dwelling type
            const matchedRow = result.data.find(row =>
              row.DwellingType === dwellingType && row.EnergyRating === newRating);

            // If a matching row is found, update the threshold values
            if (matchedRow) {
              setThresholdValues({
                wall: parseFloat(matchedRow.UValueWallMean),
                roof: parseFloat(matchedRow.UValueRoofMean),
                floor: parseFloat(matchedRow.UValueFloorMean),
                window: parseFloat(matchedRow.UValueWindowMean),
                door: parseFloat(matchedRow.UValueDoorMean)
              });
            }
          }
        });
      });
  }, [selectedProperty, newEnergyRating]); // Ensure useEffect is triggered when these values change

  // Display the selected property and inputs for modifying U-values
  return (
        <div>
            <h1>Selected Property</h1>
            {selectedProperty && (
                <div className="u-values-card">
                  <p><strong>Dwelling Type:</strong> {selectedProperty.DwellingTypeDescr}</p>
                  <p><strong>Current Energy Rating:</strong> {selectedProperty.EnergyRating}</p>
                  <p></p>
                  <h2>Select New Energy Rating</h2>
                  <p>
                    Choosing a new Energy Rating for your home is a proactive step towards enhancing your living
                    environment and reducing your energy costs.
                  </p>
                  <p>
                    A higher Energy Rating signifies better thermal efficiency, meaning your home retains heat more
                    effectively during winter and stays cooler during summer.
                  </p>
                  <p>
                    This not only improves comfort but also reduces the need for excessive heating or
                    cooling, leading to significant savings on energy bills.
                  </p>
                  <p>
                    Additionally, upgrading your home&apos;s energy performance can increase its market
                    value and reduce its environmental impact by lowering carbon emissions.
                  </p>
                  <p>
                    Select a new Energy Rating below to see how you can achieve these benefits.
                  </p>
                  <select value={newEnergyRating} onChange={e => setNewEnergyRating(e.target.value)}>
                    <option value="">Select New Energy Rating</option>
                    {availableRatings && availableRatings.map(rating => <option key={rating}
                                                                                value={rating}>{rating}</option>)}
                  </select>
                  <button onClick={submitNewEnergyRating} className="button-blue">Submit</button>
                  <h2>Current U-Values</h2>
                  <table className="u-values-table">
                    <thead>
                    <tr>
                      <th>U-Value Types</th>
                      <th>Target U-Values</th>
                      <th>Existing U-Values</th>
                      <th>Description</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                      <th>Walls UValue</th>
                      <td>{thresholdValues.wall}</td>
                      <td className={`value-cell ${selectedProperty.UValueWall - thresholdValues.wall > 0.01 ? 'u-value-high' : selectedProperty.UValueWall - thresholdValues.wall < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueWall}
                      </td>
                      <td className={`${selectedProperty.UValueWall - thresholdValues.wall > 0.01 ? 'u-value-high' : selectedProperty.UValueWall - thresholdValues.wall < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueWall - thresholdValues.wall > 0.01
                          ? 'Your walls are not holding heat well. Consider upgrading insulation.'
                          : selectedProperty.UValueWall - thresholdValues.wall < -0.01
                            ? 'Your walls are well insulated against heat loss.'
                            : 'Your walls meet the minimum standard, but improvements could still be beneficial.'}
                      </td>
                    </tr>
                    <tr>
                      <th>Roof UValue</th>
                      <td>{thresholdValues.roof}</td>
                      <td className={`value-cell ${selectedProperty.UValueRoof - thresholdValues.roof > 0.01 ? 'u-value-high' : selectedProperty.UValueRoof - thresholdValues.roof < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueRoof}
                      </td>
                      <td className={`${selectedProperty.UValueRoof - thresholdValues.roof > 0.01 ? 'u-value-high' : selectedProperty.UValueRoof - thresholdValues.roof < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueRoof > thresholdValues.roof
                          ? 'Heat is escaping through your roof. Consider upgrading insulation.'
                          : selectedProperty.UValueRoof === thresholdValues.roof
                            ? 'Your roof meets the minimum standard, but improvements could still be beneficial.'
                            : 'Your roof is well insulated against heat loss.'}
                      </td>
                    </tr>
                    <tr>
                      <th>Floors UValue</th>
                      <td>{thresholdValues.floor}</td>
                      <td className={`value-cell ${selectedProperty.UValueFloor - thresholdValues.floor > 0.01 ? 'u-value-high' : selectedProperty.UValueFloor - thresholdValues.floor < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueFloor}
                      </td>
                      <td className={`${selectedProperty.UValueFloor - thresholdValues.floor > 0.01 ? 'u-value-high' : selectedProperty.UValueFloor - thresholdValues.floor < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueFloor > thresholdValues.floor
                          ? 'Your floors are losing heat, consider improving insulation.'
                          : selectedProperty.UValueFloor === thresholdValues.floor
                            ? 'Your floors meet the standard, but consider enhancements for better warmth.'
                            : 'Your floors are retaining heat efficiently.'}
                      </td>
                    </tr>
                    <tr>
                      <th>Windows UValue</th>
                      <td>{thresholdValues.window}</td>
                      <td className={`value-cell ${selectedProperty.UValueWindow - thresholdValues.window > 0.01 ? 'u-value-high' : selectedProperty.UValueWindow - thresholdValues.window < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueWindow}
                      </td>
                      <td className={`${selectedProperty.UValueWindow - thresholdValues.window > 0.01 ? 'u-value-high' : selectedProperty.UValueWindow - thresholdValues.window < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UValueWindow > thresholdValues.window
                          ? 'Your windows are not keeping heat in effectively. Consider updating them.'
                          : selectedProperty.UValueWindow === thresholdValues.window
                            ? 'Your windows are adequate, but newer models could offer more savings.'
                            : 'Your windows are performing well in retaining heat.'}
                      </td>
                    </tr>
                    <tr>
                      <th>Doors UValue</th>
                      <td>{thresholdValues.door}</td>
                      <td className={`value-cell ${selectedProperty.UvalueDoor - thresholdValues.door > 0.01 ? 'u-value-high' : selectedProperty.UvalueDoor - thresholdValues.door < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UvalueDoor}
                      </td>
                      <td className={`${selectedProperty.UvalueDoor - thresholdValues.door > 0.01 ? 'u-value-high' : selectedProperty.UvalueDoor - thresholdValues.door < -0.01 ? 'u-value-low' : 'u-value-medium'}`}>
                        {selectedProperty.UvalueDoor > thresholdValues.door
                          ? 'Your doors are not insulating well. Consider replacements or sealing gaps.'
                          : selectedProperty.UvalueDoor === thresholdValues.door
                            ? 'Your doors meet the current standard, yet there might be room for improvement.'
                            : 'Your doors are well-sealed and insulated.'}
                      </td>
                    </tr>
                    </tbody>
                  </table>
                  <h2>Select U-Values to Modify</h2>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueWall}
                             onChange={(e) => handleUValueChange(e, 'UValueWall')}/>
                      Wall
                    </label>
                  </div>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueRoof}
                             onChange={(e) => handleUValueChange(e, 'UValueRoof')}/>
                      Roof
                    </label>
                  </div>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueFloor}
                             onChange={(e) => handleUValueChange(e, 'UValueFloor')}/>
                      Floor
                    </label>
                  </div>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueWindow}
                             onChange={(e) => handleUValueChange(e, 'UValueWindow')}/>
                      Window
                    </label>
                  </div>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueDoor}
                             onChange={(e) => handleUValueChange(e, 'UValueDoor')}/>
                      Door
                    </label>
                  </div>

                  <div className="u-values-card">
                    <h2>Improvement Estimates</h2>
                    <table className="u-values-table">
                      <thead>
                      <tr>
                        <th>Improvement</th>
                        <th>Estimated Works Cost</th>
                        <th>Available SEAI Grant</th>
                        <th>Estimated Cost to Homeowner</th>
                        <th>Apply for Grant</th>
                      </tr>
                      </thead>
                      <tbody>
                      {selectedUValues.UValueWall && (
                          <>
                            <tr>
                              <td>Internal Wall Insulation</td>
                              <td>€9,000</td>
                              <td>€4,500</td>
                              <td>€4,500</td>
                              <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                                     target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                            </tr>
                            <tr>
                              <td>External Wall Insulation</td>
                              <td>€16,000</td>
                              <td>€8,000</td>
                              <td>€8,000</td>
                              <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                                     target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                            </tr>
                            <tr>
                              <td>Cavity Wall Insulation</td>
                              <td>€2,200</td>
                              <td>€1,700</td>
                              <td>€500</td>
                              <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                                     target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                            </tr>
                          </>
                      )}
                      {selectedUValues.UValueRoof && (
                          <tr>
                            <td>Roof/Attic Insulation</td>
                            <td>€2,000</td>
                            <td>€1,500</td>
                            <td>€500</td>
                            <td><a href="https://www.seai.ie/grants/home-energy-grants/insulation-grants/"
                                   target="_blank" rel="noopener noreferrer" className="button-blue">Apply</a></td>
                          </tr>
                      )}
                      {/* Repeat similar structures for UValueFloor, UValueWindow, UValueDoor if necessary */}
                      </tbody>
                    </table>
                    {/* You can add additional instructions or information below the table */}
                  </div>

                </div>
            )}
        </div>
  );
}

export default SuggestionsPage;



Modified 15/03/2024

import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import Papa from 'papaparse';

function SuggestionsPage () {
  const location = useLocation();
  const [selectedProperty, setSelectedProperty] = useState(location.state ? location.state.selectedProperty : null);
  const [newEnergyRating, setNewEnergyRating] = useState('');
  const [archetypeData, setArchetypeData] = useState([]);
  const [modifiedValues, setModifiedValues] = useState({});
  const [selectedUValues, setSelectedUValues] = useState({});

  const handleValueChange = (field, value) => {
    setModifiedValues(prev => ({ ...prev, [field]: value }));
  };

  useEffect(() => {
    // Fetch archetype data once at the start
    fetch('/data/data_building_archetype.csv')
      .then(response => response.text())
      .then(text => {
        Papa.parse(text, {
          header: true,
          complete: result => setArchetypeData(result.data)
        });
      });
  }, []);

  const availableRatings = selectedProperty && ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3', 'D1', 'D2'].filter(rating => rating !== selectedProperty.EnergyRating && rating < selectedProperty.EnergyRating);

  const thresholdValues = {
    wall: 0.36,
    roof: 0.22,
    floor: 0.34,
    window: 2.10,
    door: 2.05
  };

  const improvementCosts = {
    UValueWall: 5000, // example costs in currency units
    UValueRoof: 4000,
    UValueFloor: 3000,
    UValueWindow: 2000,
    UValueDoor: 1000
  };

  const availableGrants = {
    UValueWall: 2000, // example grant amounts in currency units
    UValueRoof: 1500,
    UValueFloor: 1000,
    UValueWindow: 500,
    UValueDoor: 250
  };

  const handleUValueChange = (e, field) => {
    setSelectedUValues({ ...selectedUValues, [field]: e.target.checked });
  };

  const submitNewUValues = () => {
    // Logic to calculate predicted results based on new U-values
    console.log('New U-Values submitted:', selectedUValues);
    // You might want to set some results state here based on the new U-values
  };

  // Display the selected property and inputs for modifying U-values
  return (
        <div>
            <h1>Selected Property</h1>
            {selectedProperty && (
                <div className="u-values-card">
                  <p>Dwelling Type: {selectedProperty.DwellingTypeDescr}</p>
                  <p>Current Energy Rating: {selectedProperty.EnergyRating}</p>
                  <h2>Current U-Values</h2>
                  <table className="u-values-table">
                    <thead>
                    <tr>
                      <th>U-Value Types</th>
                      <th>Existing Value</th>
                      <th>Description</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                      <th>Walls UValue</th>
                      <td>{selectedProperty.UValueWall}</td>
                      <td>{selectedProperty.UValueWall > thresholdValues.wall ? 'Your walls are not holding heat well. This could mean your wall insulation is thin, old, or missing. Your home may feel colder and your heating bills may be higher.' : 'Your walls are good at keeping heat inside your home. This means your wall insulation is effective. Your home should feel warmer and your heating bills should be lower..'}</td>
                    </tr>
                    <tr>
                      <th>Roof UValue</th>
                      <td>{selectedProperty.UValueRoof}</td>
                      <td>{selectedProperty.UValueRoof > thresholdValues.roof ? 'Heat is escaping through your roof. This often means your roof insulation is insufficient or absent. Your top floors may be chilly, and heating costs could be high.' : 'Your roof is well insulated, keeping heat from escaping. This helps maintain a comfortable temperature throughout your home and can reduce heating costs.'}</td>
                    </tr>
                    <tr>
                      <th>Floors UValue</th>
                      <td>{selectedProperty.UValueFloor}</td>
                      <td>{selectedProperty.UValueFloor > thresholdValues.floor ? 'Your floors are losing heat, which can make them feel cold underfoot. This usually means there\'s inadequate insulation beneath them. This can lead to colder room temperatures and higher heating bills.' : 'Your floors are effective at retaining heat, which can help keep your feet and room warmer. Good floor insulation contributes to overall warmth and energy efficiency in your home.'}</td>
                    </tr>
                    <tr>
                      <th>Windows UValue</th>
                      <td>{selectedProperty.UValueWindow}</td>
                      <td>{selectedProperty.UValueWindow > thresholdValues.window ? 'Your windows are not very good at keeping heat inside. This could be because they are old, single-glazed, or poorly fitted, leading to drafts and cold spots near windows.' : 'Your windows are doing a good job of keeping heat in. They are likely double or triple-glazed and well-sealed, helping to maintain a comfortable temperature and reduce noise from outside.'}</td>
                    </tr>
                    <tr>
                      <th>Doors UValue</th>
                      <td>{selectedProperty.UvalueDoor}</td>
                      <td>{selectedProperty.UvalueDoor > thresholdValues.door ? 'Your doors allow heat to escape easily, which can make your home feel drafty, particularly near doors. This might mean the doors are old, poorly insulated, or not fitting correctly.' : 'Your doors are well insulated and fitted, helping to keep heat in and cold out. This contributes to a warmer, more energy-efficient home.'}</td>
                    </tr>
                    </tbody>
                  </table>
                  <p></p>
                  <h2>Select New Energy Rating</h2>
                  <p>
                    Choosing a new Energy Rating for your home is a proactive step towards enhancing your living
                    environment and reducing your energy costs.
                    A higher Energy Rating signifies better thermal efficiency, meaning your home retains heat more
                    effectively during winter and stays cooler
                    during summer. This not only improves comfort but also reduces the need for excessive heating or
                    cooling, leading to significant savings on
                    energy bills. Additionally, upgrading your home&pos;s energy performance can increase its market value
                    and reduce its environmental impact
                    by lowering carbon emissions. Select a new Energy Rating below to see how you can achieve these
                    benefits.
                  </p>
                  <select value={newEnergyRating} onChange={e => setNewEnergyRating(e.target.value)}>
                    <option value="">Select New Energy Rating</option>
                    {availableRatings && availableRatings.map(rating => <option key={rating}
                                                                                value={rating}>{rating}</option>)}
                  </select>
                  <h2>Select U-Values to Modify</h2>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueWall}
                             onChange={(e) => handleUValueChange(e, 'UValueWall')}/>
                      Wall
                    </label>
                  </div>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueRoof}
                             onChange={(e) => handleUValueChange(e, 'UValueRoof')}/>
                      Roof
                    </label>
                  </div>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueFloor}
                             onChange={(e) => handleUValueChange(e, 'UValueFloor')}/>
                      Floor
                    </label>
                  </div>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueWindow}
                             onChange={(e) => handleUValueChange(e, 'UValueWindow')}/>
                      Window
                    </label>
                  </div>
                  <div>
                    <label>
                      <input type="checkbox" checked={!!selectedUValues.UValueDoor}
                             onChange={(e) => handleUValueChange(e, 'UValueDoor')}/>
                      Door
                    </label>
                  </div>
                  <button onClick={submitNewUValues} className="button-blue">Submit New U-Values</button>
                  <div className="u-values-card">
                    <h2>Improvement Estimates</h2>
                    <table className="u-values-table">
                      <thead>
                      <tr>
                        <th>Improvement</th>
                        <th>Estimated Works Cost</th>
                        <th>Available Grant</th>
                        <th>Estimated Cost to Homeowner</th>
                      </tr>
                      </thead>
                      <tbody>
                      {Object.entries(modifiedValues).map(([key, value]) => {
                        // Only display rows for values the user chose to modify
                        if (value) {
                          return (
                              <tr key={key}>
                                <td>{key.replace('UValue', '')} Insulation</td>
                                <td>{improvementCosts[key]}</td>
                                <td>{availableGrants[key]}</td>
                                <td>{improvementCosts[key] - availableGrants[key]}</td>
                              </tr>
                          );
                        } else {
                          return null;
                        }
                      })}
                      </tbody>
                    </table>
                    {/* You can add additional instructions or information below the table */}
                  </div>

                </div>
            )}
        </div>
  );
}

export default SuggestionsPage;


Modified 13/03/2024
import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import Papa from 'papaparse';

function SuggestionsPage () {
  const location = useLocation();
  const [selectedProperty, setSelectedProperty] = useState(location.state.selectedProperty);
  const [modifiedValues, setModifiedValues] = useState({});

  const handleValueChange = (field, value) => {
    setModifiedValues(prev => ({ ...prev, [field]: value }));
  };

  useEffect(() => {
    // Assuming you need to fetch new energy ratings based on modified U-values
    fetch('/data/data_building_archetype.csv')
      .then(response => response.text())
      .then(csvText => {
        Papa.parse(csvText, {
          header: true, // Assuming your CSV has headers
          complete: (result) => {
            console.log(result.data);
            // Do something with the data based on modified U-values
          }
        });
      });
  }, [modifiedValues]); // Rerun when modifiedValues changes

  // Display the selected property and inputs for modifying U-values
  return (
        <div>
            <h1>Selected Property</h1>
            {selectedProperty && (
                <div>
                    <p>Dwelling Type: {selectedProperty.DwellingTypeDescr}</p>
                    <p>Energy Rating: {selectedProperty.EnergyRating}</p>
                    <table>
                        <thead>
                        <tr>
                            <th>UValue Wall</th>
                            <th>UValue Roof</th>
                            <th>UValue Floor</th>
                            <th>UValue Window</th>
                            <th>UValue Door</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                            <td>{selectedProperty.UValueWall}</td>
                            <td>{selectedProperty.UValueRoof}</td>
                            <td>{selectedProperty.UValueFloor}</td>
                            <td>{selectedProperty.UValueWindow}</td>
                            <td>{selectedProperty.UvalueDoor}</td>
                        </tr>
                        </tbody>
                    </table>
                    <div>
                        <label>Modify Wall U-Value:</label>
                        <input
                            type="number"
                            value={modifiedValues.UValueWall || selectedProperty.UValueWall}
                            onChange={e => handleValueChange('UValueWall', e.target.value)}
                        />
                    </div>
                    <div>
                        <label>Modify Roof U-Value:</label>
                        <input
                            type="number"
                            value={modifiedValues.UValueRoof || selectedProperty.UValueRoof}
                            onChange={e => handleValueChange('UValueRoof', e.target.value)}
                        />
                    </div>
                    <div>
                        <label>Modify Floor U-Value:</label>
                        <input
                            type="number"
                            value={modifiedValues.UValueFloor || selectedProperty.UValueFloor}
                            onChange={e => handleValueChange('UValueFloor', e.target.value)}
                        />
                    </div>
                    <div>
                        <label>Modify Window U-Value:</label>
                        <input
                            type="number"
                            value={modifiedValues.UValueWindow || selectedProperty.UValueWindow}
                            onChange={e => handleValueChange('UValueWindow', e.target.value)}
                        />
                    </div>
                    <div>
                        <label>Modify Door U-Value:</label>
                        <input
                            type="number"
                            value={modifiedValues.UvalueDoor || selectedProperty.UvalueDoor}
                            onChange={e => handleValueChange('UvalueDoor', e.target.value)}
                        />
                    </div>
                    {/* Add here any additional logic or display elements */}
                </div>
            )}
        </div>
  );
}

export default SuggestionsPage;




Modified Feb 2024
import React, { useState, useEffect } from 'react';
import Papa from 'papaparse';

function SuggestionsPage () {
  const [properties, setProperties] = useState([]);

  useEffect(() => {
    fetch('/data/data_building_archetype.csv')
      .then(response => response.text())
      .then(csvText => {
        Papa.parse(csvText, {
          header: true, // Assuming your CSV has headers
          complete: (result) => {
            console.log(result.data);
            setProperties(result.data);
          }
        });
      });
  }, []);

  // Assuming you have a Property component to display each
  return (
        <div>
            <h1>Property List</h1>
            <table>
                <thead>
                <tr>
                    <th>Dwelling Type</th>
                    <th>Energy Rating</th>
                    <th>Ber Rating Mean</th>
                    <th>UValue Wall Mean</th>
                    <th>UValue Roof Mean</th>
                    <th>UValue Floor Mean</th>
                    <th>UValue Window Mean</th>
                    <th>UValue Door Mean</th>
                </tr>
                </thead>
                <tbody>
                {properties.map((property, index) => (
                    <tr key={index}>
                        <td>{property.DwellingType}</td>
                        <td>{property.EnergyRating}</td>
                        <td>{property.BerRatingMean}</td>
                        <td>{property.UValueWallMean}</td>
                        <td>{property.UValueRoofMean}</td>
                        <td>{property.UValueFloorMean}</td>
                        <td>{property.UValueWindowMean}</td>
                        <td>{property.UValueDoorMean}</td>
                    </tr>
                ))}
                </tbody>
            </table>
        </div>
  );
}

export default SuggestionsPage;



